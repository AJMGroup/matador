#!/usr/bin/env python
# coding: utf-8
""" This script mimics the dispersion.pl script bundled
with CASTEP. For the given bands file, a bandstructure
is created. If a <seed>.adaptive.dat file exists
then a combined BS/DOS plot will be created.
"""

from matador.plotting import plot_spectral
from matador.utils.print_utils import print_failure
from os.path import isfile
import argparse

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='dispersion',
        description='simple plotting script for bandstructures/DOS based on matador')

    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('--pdf', action='store_true',
                        help='save pdf rather than showing plot in X')
    parser.add_argument('--png', action='store_true',
                        help='save png rather than showing plot in X')
    parser.add_argument('--svg', action='store_true',
                        help='save svg rather than showing plot in X')
    parser.add_argument('--labels', type=str, nargs='*',
                        help='list of legend labels')
    parser.add_argument('-g', '--gap', action='store_true',
                        help='plot position and size of band gap')
    parser.add_argument('-ph', '--phonons', action='store_true',
                        help='plot phonon calculation, rather than electronic')
    parser.add_argument('-v', '--verbosity', type=int, default=0,
                        help='control verbosity of output')
    parser.add_argument('-pw', '--plot_window', type=float,
                        help='energy window to plot either side of E_F (eV)\
                             (DEFAULT: 5 eV)')
    parser.add_argument('seed', type=str, nargs='*',
                        help='seedname or bands file path')
    kwargs = vars(parser.parse_args())
    if 'gap' in kwargs:
        gap = kwargs['gap']
        del kwargs['gap']
    assert len(kwargs.get('seed')) >= 1, 'Seed name needed!'

    seed = kwargs.get('seed')
    test_seed = kwargs.get('seed')[0]
    verbosity = kwargs.get('verbosity')
    phonons = kwargs.get('phonons')
    labels = kwargs.get('labels')

    del kwargs['seed']
    del kwargs['verbosity']
    del kwargs['labels']

    if not phonons:
        bs_seed = test_seed.replace('.bands', '') + '.bands'
        bandstructure = isfile(bs_seed)
        dos_seed = test_seed.replace('.bands', '') + '.adaptive.dat'
        dos = isfile(dos_seed)
        cell_seed = test_seed.replace('.bands', '') + '.cell'
        cell = isfile(cell_seed)

    elif phonons:
        phonon_seed = test_seed.replace('.phonon', '') + '.phonon'
        bandstructure = isfile(phonon_seed)
        dos_seed = test_seed.replace('.phonon', '') + '.phonon_dos'
        dos = isfile(dos_seed)
        cell_seed = test_seed.replace('.phonon', '') + '.cell'
        cell = isfile(cell_seed)

    if not dos and not bandstructure:
        print_failure('Could not find files for specified seed {}.'.format(test_seed))
        exit()

    plot = plot_spectral(seed,
                         plot_bandstructure=bandstructure,
                         plot_dos=dos,
                         cell=cell,
                         gap=gap,
                         verbosity=verbosity,
                         labels=labels,
                         **kwargs)
